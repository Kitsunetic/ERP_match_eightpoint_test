cmake_minimum_required(VERSION 2.8)
project( spherical_match_eightpoint_test )

cmake_policy(SET CMP0015 NEW)
add_definitions(-D_USE_MATH_DEFINES)
add_definitions(-D_CRT_SECURE_NO_WARNINGS)

set( INCLUDE_DIR "${PROJECT_SOURCE_DIR}/src" )
set( SRCS )
aux_source_directory( "${PROJECT_SOURCE_DIR}/src" SRCS)

set( ONE_IMAGE_TEST_SRC )
aux_source_directory( "${PROJECT_SOURCE_DIR}/one_image_test" ONE_IMAGE_TEST_SRC)
set( TWO_SYNTHESIS_IMAGE_TEST_SRC )
aux_source_directory( "${PROJECT_SOURCE_DIR}/two_synthesis_image_test" TWO_SYNTHESIS_IMAGE_TEST_SRC)
set( TWO_REAL_IMAGE_TEST_SRC )
aux_source_directory( "${PROJECT_SOURCE_DIR}/two_real_image_test" TWO_REAL_IMAGE_TEST_SRC)
set( IMAGE_ROTATE_TEST_SRC )
aux_source_directory( "${PROJECT_SOURCE_DIR}/image_rotate_test" IMAGE_ROTATE_TEST_SRC)
set( MANUAL_ESTIMATION_TEST_SRC )
aux_source_directory( "${PROJECT_SOURCE_DIR}/manual_estimation_test" MANUAL_ESTIMATION_TEST_SRC)
set( MANUAL_POINT_PICKUP_TEST_SRC )
aux_source_directory( "${PROJECT_SOURCE_DIR}/manual_point_pickup_test" MANUAL_POINT_PICKUP_TEST_SRC)

IF (WIN32)
    set( ld_flag ${PROJECT_SOURCE_DIR}/opencv342/windows/x64/vc14/lib )
    set( include_flag ${PROJECT_SOURCE_DIR}/opencv342/windows/include )
    set( dll_dir ${PROJECT_SOURCE_DIR}/opencv342/windows/x64/vc14/bin )
    set( libs opencv_img_hash341 opencv_world341 OpenMP::OpenMP_CXX )
ELSE()
    set( ld_flag ${PROJECT_SOURCE_DIR}/opencv342/linux/lib )
    set( include_flag ${PROJECT_SOURCE_DIR}/opencv342/linux/include )
    set( libs opencv_img_hash opencv_world OpenMP::OpenMP_CXX )
ENDIF()

find_package(OpenMP REQUIRED)

include_directories( ${include_flag} ${INCLUDE_DIR} )
link_directories( ${ld_flag} )

add_executable( one_image_test.out ${SRCS} ${ONE_IMAGE_TEST_SRC} )
add_executable( two_synthesis_image_test.out ${SRCS} ${TWO_SYNTHESIS_IMAGE_TEST_SRC} )
add_executable( two_real_image_test.out ${SRCS} ${TWO_REAL_IMAGE_TEST_SRC} )
add_executable( image_rotate_test.out ${SRCS} ${IMAGE_ROTATE_TEST_SRC} )
add_executable( manual_estimation_test.out ${SRCS} ${MANUAL_ESTIMATION_TEST_SRC} )
add_executable( manual_point_pickup_test.out ${SRCS} ${MANUAL_POINT_PICKUP_TEST_SRC} )

target_link_libraries(one_image_test.out ${libs} ${CMAKE_THREAD_LIBS_INIT} ${CERES_LIBRARIES} )
target_link_libraries(two_synthesis_image_test.out ${libs} ${CMAKE_THREAD_LIBS_INIT} ${CERES_LIBRARIES} )
target_link_libraries(two_real_image_test.out ${libs} ${CMAKE_THREAD_LIBS_INIT} ${CERES_LIBRARIES} )
target_link_libraries(image_rotate_test.out ${libs} ${CMAKE_THREAD_LIBS_INIT} ${CERES_LIBRARIES} )
target_link_libraries(manual_estimation_test.out ${libs} ${CMAKE_THREAD_LIBS_INIT} ${CERES_LIBRARIES} )
target_link_libraries(manual_point_pickup_test.out ${libs} ${CMAKE_THREAD_LIBS_INIT} ${CERES_LIBRARIES} )
